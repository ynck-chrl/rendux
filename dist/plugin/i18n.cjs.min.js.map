{"version":3,"file":"i18n.cjs.min.js","sources":["../../src/plugin/i18n.js"],"sourcesContent":["// i18n Plugin for renderx (render directive)\n// Usage:\n//   import { renderx } from 'renderx';\n//   import { i18nPlugin } from './plugin-i18n.js';\n//   renderx.use(i18nPlugin({ translations: myTranslations, defaultLanguage: 'fr' }));\n\n// Default translations\nconst defaultTranslations = {\n  en: {\n    message: \"Welcome to renderx!\",\n    button: \"Click me\",\n    title: \"Hello World\"\n  },\n  fr: {\n    message: \"Bienvenue dans renderx!\",\n    button: \"Cliquez-moi\",\n    title: \"Bonjour le Monde\"\n  }\n};\n\n/**\n * Factory for creating an i18n plugin instance.\n * @param {Object} options\n * @param {Object} options.translations - mapping of language codes to translation objects\n * @param {string} options.defaultLanguage - initial language code\n */\nfunction createI18nPlugin(options = {}) {\n  const translations = options.translations || defaultTranslations;\n  let currentLanguage = options.defaultLanguage || 'en';\n  let component = null;\n\n  return {\n    name: 'i18n',\n    target: 'render',\n    execute: function(key, ...args) {\n      const keys = key.split('.');\n      let value = translations[currentLanguage];\n      for (const k of keys) {\n        if (value && typeof value === 'object' && k in value) {\n          value = value[k];\n        } else {\n          return `[${key}]`;\n        }\n      }\n\n      if (typeof value === 'string' && args.length > 0) {\n        const result = value.replace(/\\{(\\d+)\\}/g, (match, idx) => {\n          const i = parseInt(idx, 10);\n          return args[i] !== undefined ? args[i] : match;\n        });\n        return result;\n      }\n      return value || `[${key}]`;\n    },\n    setLanguage(lang) {\n      if (translations[lang]) {\n        currentLanguage = lang;\n        return true;\n      }\n      return false;\n    },\n    getLanguage() {\n      return currentLanguage;\n    },\n    addTranslations(lang, newTrans) {\n      if (!translations[lang]) translations[lang] = {};\n      Object.assign(translations[lang], newTrans);\n    }\n  };\n}\n// Export the plugin factory\nexport const i18nPlugin = createI18nPlugin;"],"names":["defaultTranslations","en","message","button","title","fr","i18nPlugin","options","translations","currentLanguage","defaultLanguage","name","target","execute","key","args","keys","split","value","k","length","replace","match","idx","i","parseInt","undefined","setLanguage","lang","getLanguage","addTranslations","newTrans","Object","assign"],"mappings":";oEAOA,MAAMA,EAAsB,CAC1BC,GAAI,CACFC,QAAS,sBACTC,OAAQ,WACRC,MAAO,eAETC,GAAI,CACFH,QAAS,0BACTC,OAAQ,cACRC,MAAO,qBAuDC,MAACE,EA7Cb,SAA0BC,EAAU,IAClC,MAAMC,EAAeD,EAAQC,cAAgBR,EAC7C,IAAIS,EAAkBF,EAAQG,iBAAmB,KAGjD,MAAO,CACLC,KAAM,OACNC,OAAQ,SACRC,QAAS,SAASC,KAAQC,GACxB,MAAMC,EAAOF,EAAIG,MAAM,KACvB,IAAIC,EAAQV,EAAaC,GACzB,IAAK,MAAMU,KAAKH,EAAM,CACpB,IAAIE,GAA0B,iBAAVA,KAAsBC,KAAKD,GAG7C,MAAO,IAAIJ,KAFXI,EAAQA,EAAMC,EAIjB,CAED,GAAqB,iBAAVD,GAAsBH,EAAKK,OAAS,EAAG,CAKhD,OAJeF,EAAMG,QAAQ,aAAc,CAACC,EAAOC,KACjD,MAAMC,EAAIC,SAASF,EAAK,IACxB,YAAmBG,IAAZX,EAAKS,GAAmBT,EAAKS,GAAKF,GAG5C,CACD,OAAOJ,GAAS,IAAIJ,IACrB,EACDa,YAAYC,KACNpB,EAAaoB,KACfnB,EAAkBmB,GACX,GAIXC,YAAW,IACFpB,EAET,eAAAqB,CAAgBF,EAAMG,GACfvB,EAAaoB,KAAOpB,EAAaoB,GAAQ,IAC9CI,OAAOC,OAAOzB,EAAaoB,GAAOG,EACnC,EAEL"}